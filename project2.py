# -*- coding: utf-8 -*-
"""project2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DekoyhuTO9EC8Q3EedyQfhu1wsx9nd-r
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder,StandardScaler
from sklearn.metrics import accuracy_score,confusion_matrix,classification_report,ConfusionMatrixDisplay
sns.set(style="whitegrid")

df=pd.read_csv('train.csv')
df.head()

print(df.columns)

print(df.describe)

df.info()

"""Create a new feature(pixel area)"""

df ['pixle_area']=df['px_height']=df['px_width']

"""Define Feature(x) And Traget(y)"""

x=df.drop('price_range',axis=1)
y=df['price_range']

"""Feature Scaling"""

scaler = StandardScaler()
x_scaled=scaler.fit_transform(x)

print(x_scaled)

"""Split Data into Train and Test sets"""

x_train,x_test,y_train,y_test=train_test_split(x_scaled,y,test_size=0.2,random_state=42)

print(x_train)

print(x_test)

print(y_train)

print(y_test)

"""Train ModelRandom Forest Classifier"""

rf_model=RandomForestClassifier(n_estimators=100,random_state=42)
rf_model.fit(x_train,y_train)

"""Predicition"""

y_pred = rf_model.predict(x_test)

"""Evaluation"""

accuracy = accuracy_score(y_test,y_pred)
print('\n Accuracy:' ,accuracy)
print('\n Confusion Matrix:')
print(confusion_matrix(y_test,y_pred))
print('\n Classification Report:')
print(classification_report(y_test,y_pred))

"""exploratory data analysis"""

plt.figure(figsize=(30,10))
sns.heatmap(df.corr(),annot=True,cmap='coolwarm',linewidth=0.5,linecolor='white')
plt.title("feature correlation Heatmap",fontsize=20)
plt.xticks(rotation=45)
plt.yticks(rotation=0)
plt.tight_layout()
plt.show()

sns.boxplot(data=df,x='price_range',y='battery_power')
plt.show()

sns.boxplot(x='price_range',y='ram',data=df)
plt.title("RAM vs price Range")
plt.show()

sns.violinplot(data=df,x='price_range',y='px_height')
plt.title('Pixel Height vs Price  Range')
plt.show()

sns.boxplot(x='price_range',y='mobile_wt',data=df)
plt.title("weight vs price")
plt.show()

sns.countplot(x='n_cores',hue='price_range',data=df)
plt.title("number of cores vs price range")
plt.show()

sns.stripplot(x='price_range',y='clock_speed',data=df,jitter=0.2)
plt.title("Clock Speed vs Price")
plt.show()

sns.displot(df['px_width'])
plt.title('Pixel_width vs count')
plt.show()

sns.boxplot(x='price_range',y='fc',data=df)
plt.title("Front Camera vs price")
plt.show()

sns.countplot(data=df,x='price_range',hue='n_cores')
plt.title("Price_Range vs Distrubition")
plt.show()

sns.histplot(df['fc'],kde=True,bins=3)
plt.title("Talk time Distribution")
plt.show()

sns.histplot(df['px_height'])
plt.title('Pixel Height Distribution')
plt.show()

sns.pointplot(data=df,x='price_range',y='mobile_wt')
plt.title('Mobile weight vs Price_Range')
plt.show()

sns.ecdfplot(data=df,x='px_width',hue='price_range')
plt.title('Pixel Width vs Price_Range')
plt.show()

sns.rugplot(data=df,x='price_range',y='px_width')
plt.title('Pixel Width vs Price_Range')
plt.show()

sns.kdeplot(data=df,x='px_width',hue='price_range')
plt.title('Pixel Width vs Price_Range')
plt.show()

sns.residplot(data=df,x='px_width',y='price_range')
plt.title('Pixel Width vs Price_Range')
plt.show()

sns.relplot(data=df,x='px_width',y='price_range',hue='price_range')
plt.title('Pixel Width vs Price_Range')
plt.show()

sns.pairplot(data=df,hue='price_range')
plt.title('Pixel Width vs Price_Range')
plt.show()

sns.histplot(df['px_height'])
plt.show()

sns.scatterplot(data=df, x="talk_time", y="battery_power", hue="price_range")
plt.show()

sns.swarmplot(data=df,x='price_range',y='px_width')
plt.show()

sns.catplot(data=df,x='price_range',y='px_width',kind='box')
plt.show()

g = sns.FacetGrid(df, col="four_g", row="dual_sim", hue="price_range")
g.map_dataframe(sns.scatterplot, x="ram", y="battery_power")
g.add_legend()
plt.show()

plt.figure(figsize=(6, 4))
# Calculate the average RAM for each price range and WiFi combination
avg_ram = df.groupby(['price_range', 'wifi'])['ram'].mean().unstack()
sns.heatmap(avg_ram, annot=True, cmap="viridis")
plt.title("Average RAM by Price Range & WiFi")
plt.show()

sns.heatmap(data=df, annot=True, cmap="Spectral")
plt.title("Mean Feature Values by Price Range")
plt.show()