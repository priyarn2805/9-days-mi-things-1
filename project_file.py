# -*- coding: utf-8 -*-
"""project file

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18qbDzkaJcGtuWLQGyBgGMNU_TVKWXzOZ
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix,ConfusionMatrixDisplay
from sklearn.preprocessing import LabelEncoder,StandardScaler

"""Load Titanic Dataset"""

df=pd.read_csv('titanic.csv')
df.head()

print(df.columns)

print(df.describe)

df.info()

df.drop(['PassengerId','Name','Ticket','Cabin'],axis=1,inplace=True)

df.dropna(subset=['Survived'],inplace=True)

df['Age'].fillna(df['Age'].median(),inplace=True)
df['Embarked'].fillna(df['Embarked'].mode()[0],inplace=True)

"""Encodindg Categorial Column"""

label_encoder = LabelEncoder()
df['Sex'] = label_encoder.fit_transform(df['Sex'])
df['Embarked'] = label_encoder.fit_transform(df['Embarked'])
print(df['Sex'].head())
print(df['Embarked'].head())

"""Features and target"""

x= df.drop('Survived',axis=1)
print(x)
y=df['Survived']
print(y)

"""Feature scaling"""

scaler=StandardScaler()
x_scaled=scaler.fit_transform(x)
print(x_scaled)

"""Split Dataset"""

x_train,x_test,y_train,y_test=train_test_split(x_scaled,y,test_size=0.2,random_state=42)

"""Train Random Forest Model"""

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(x_train, y_train)

"""Predict evaluate"""

y_pred = model.predict(x_test)

"""Accuracy"""

accuracy=accuracy_score(y_test,y_pred)
print(f"Accuracy: {accuracy:.2f}")

"""Confusion matrix"""

cm=confusion_matrix(y_test,y_pred)
print("\nConfusion Matrix:\n",cm)


disp = ConfusionMatrixDisplay(confusion_matrix=cm,display_labels=['Did Not survive','survive'])
disp.plot(cmap='Blues')
plt.title('Confusion Matrix')
plt.show()

"""classification report"""

print("\n Classification Report:\n")
print(classification_report(y_test,y_pred))

sns.countplot(data=df,x='Sex', hue='Survived')
plt.title('Gender vs Survived')
plt.show()

sns.countplot(data=df,x='Pclass', hue='Survived')
plt.title('Pclass vs Survived')
plt.show()

sns.histplot(data=df,x='Age',bins=30,hue='Survived',kde=True)
plt.title('Age Distribution by Survival')
plt.show()

plt.figure(figsize=(10,6))
sns.heatmap(df.corr(),annot=True,cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()